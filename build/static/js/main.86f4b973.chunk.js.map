{"version":3,"sources":["сomponents/dumb/WeatherBlock/WeatherBlock.module.scss","сomponents/dumb/WeatherBlock/WeatherBlock.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","block","day","cloudFront","cloudBack","night","cloud","sun","moon","move","move2","text","num","WeatherBlock","_React$PureComponent","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","weather","changeMode","setState","prevState","mode","LIGHT","DARK","inherits","createClass","key","value","_this2","nowHours","Date","getHours","fetch","then","res","json","Math","floor","main","temp","_this$props","props","city","react_default","a","createElement","onClick","className","styles","React","PureComponent","App","hours","isDay","WeatherBlock_WeatherBlock","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.86f4b973.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"WeatherBlock_block__2Bx9w\",\"day\":\"WeatherBlock_day__3M__h\",\"cloudFront\":\"WeatherBlock_cloudFront__Zw8ca\",\"cloudBack\":\"WeatherBlock_cloudBack__B07xJ\",\"night\":\"WeatherBlock_night__1eM6j\",\"cloud\":\"WeatherBlock_cloud__u8SFr\",\"sun\":\"WeatherBlock_sun__3cbsW\",\"moon\":\"WeatherBlock_moon__gbPKF\",\"move\":\"WeatherBlock_move__2rx5U\",\"move2\":\"WeatherBlock_move2__2JdLY\",\"text\":\"WeatherBlock_text__gbPBv\",\"num\":\"WeatherBlock_num__nOu37\"};","import React from 'react';\nimport styles from './WeatherBlock.module.scss';\nimport {DARK, LIGHT} from \"../../../App\";\n\nexport class WeatherBlock extends React.PureComponent{\n\n  state={\n    weather: '...'\n  };\n\n  componentDidMount(){\n    const nowHours = new Date().getHours();\n    this.setState({\n      mode: (nowHours > 18 || nowHours < 6) ? DARK : LIGHT\n    });\n    fetch('https://api.openweathermap.org/data/2.5/weather?id=498817&appid=bcae149a17be581d7c3528ce08e41099')\n      .then(res => res.json())\n      .then(json => this.setState({\n        weather: Math.floor(json.main.temp - 273.15)\n      }));\n  }\n\n  changeMode = () => this.setState(prevState => ({mode: prevState.mode === LIGHT ? DARK : LIGHT}));\n\n  render(){\n\n    const { weather } = this.state;\n\n    const { mode, city } = this.props;\n\n    return(\n      <div onClick={this.changeMode} className={`${styles.block} ${mode === LIGHT ? styles.day : styles.night}`}>\n        {\n          mode === LIGHT ?\n            <div className={styles.sun}/>\n            :\n            <div className={styles.moon}/>\n        }\n        <div className={`${styles.cloud} ${styles.cloudFront}`}/>\n        <div className={`${styles.cloud} ${styles.cloudBack}`}/>\n        <div className={styles.text}>\n          <span>{city}</span>\n          <span className={styles.num}>{weather}°C</span>\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport {WeatherBlock} from \"./сomponents/dumb/WeatherBlock/WeatherBlock\";\n\nexport const LIGHT='light';\nexport const DARK='dark';\n\nclass App extends Component {\n\n  state={\n    mode: LIGHT\n  };\n\n  componentDidMount(){\n    const hours = new Date().getHours();\n    const isDay = (hours > 6) && (hours < 21);\n    this.setState({\n      mode: isDay ? LIGHT : DARK\n    })\n  }\n\n  changeMode = () => this.setState(prevState => ({mode: prevState.mode === LIGHT ? DARK : LIGHT}));\n\n  render() {\n    return (\n      <div className={`App ${this.state.mode === LIGHT ? 'app_light' : 'app_dark'}`}>\n        <div onClick={this.changeMode}>\n          <p className={`${this.state.mode === LIGHT ? 'clickTextLight' : 'clickTextDark'}`}>\n            Click to change theme:\n          </p>\n          <WeatherBlock city={'Санкт-Петербург'} mode={this.state.mode}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}